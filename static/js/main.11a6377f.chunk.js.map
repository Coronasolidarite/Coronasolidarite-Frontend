{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","pages/Index/index.js","services/getListings.js","pages/Listings/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","Icon","name","Footer","to","getListings","data","JSON","parse","localStorage","getItem","feed","entry","map","gs$cell","$t","col","row","reduce","list","value","Listings","listings","useMemo","Container","Table","HeaderCell","Body","l","Row","e","Cell","App","exact","path","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAKe,SAASA,IACtB,OACE,yBAAKC,MAAM,kBACT,oDACoB,kBAACC,EAAA,EAAD,CAAMC,KAAK,W,OCPtB,SAASC,IACtB,OACE,yBAAKH,MAAM,cACT,qECDS,iBACb,OACE,6BACE,sDACA,kBAAC,IAAD,CAAMI,GAAG,aAAT,c,QCRS,SAASC,IACtB,IAAIC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAC3C,OAAKJ,EAGEA,EAAKK,KAAKC,MACdC,KAAI,gBAAGC,EAAH,EAAGA,QAAH,MAAiB,CAACA,EAAQC,GAAID,EAAQE,IAAKF,EAAQG,QACvDC,QAAO,SAACC,EAAD,GAA8B,IAAD,mBAArBC,EAAqB,KAAdJ,EAAc,KAATC,EAAS,KACnC,MAAY,MAARA,EACKE,GAEJA,EAAKF,KACRE,EAAKF,GAAO,IAEdE,EAAKF,GAAKD,GAAOI,EACVD,KACN,IAbI,G,sBCEI,SAASE,IACtB,IAAMC,EAAWC,kBAAQlB,GACzB,OACE,6BACE,kBAACmB,EAAA,EAAD,KACE,wCACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAM1B,OAAP,KACE,kBAAC0B,EAAA,EAAMC,WAAP,YACA,kBAACD,EAAA,EAAMC,WAAP,kBAEF,kBAACD,EAAA,EAAME,KAAP,KACGL,EAAST,KAAI,SAAAe,GAAC,OACb,kBAACH,EAAA,EAAMI,IAAP,KACGD,EAAEf,KAAI,SAAAiB,GAAC,OACN,kBAACL,EAAA,EAAMM,KAAP,KAAaD,c,YCEhBE,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aACV,kBAACb,EAAD,QAGJ,kBAAC,EAAD,QCLce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11a6377f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./index.css\";\nimport { Icon } from \"semantic-ui-react\";\n\nexport default function Header() {\n  return (\n    <div class=\"csf-navigation\">\n      <h1>\n        Corona Solidarité <Icon name=\"hand\" />\n      </h1>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\nexport default function Footer() {\n  return (\n    <div class=\"csf-footer\">\n      <p>Stay save - 2020 Corona Solidarité</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Header } from \"../../components\";\n\nexport default function() {\n  return (\n    <div>\n      <h1>This is the index page</h1>\n      <Link to=\"/listings\">Listings</Link>\n    </div>\n  );\n}\n","export default function getListings() {\n  var data = JSON.parse(localStorage.getItem(\"listings\"));\n  if (!data) {\n    return [];\n  }\n  return data.feed.entry\n    .map(({ gs$cell }) => [gs$cell.$t, gs$cell.col, gs$cell.row])\n    .reduce((list, [value, col, row]) => {\n      if (row === \"1\") {\n        return list;\n      }\n      if (!list[row]) {\n        list[row] = [];\n      }\n      list[row][col] = value;\n      return list;\n    }, []);\n}\n","import React, { useMemo } from \"react\";\nimport { Header } from \"../../components\";\nimport { getListings } from \"../../services\";\nimport { Table, Container } from \"semantic-ui-react\";\n\nexport default function Listings() {\n  const listings = useMemo(getListings);\n  return (\n    <div>\n      <Container>\n        <h1>Listings</h1>\n        <Table>\n          <Table.Header>\n            <Table.HeaderCell>Nom</Table.HeaderCell>\n            <Table.HeaderCell>District</Table.HeaderCell>\n          </Table.Header>\n          <Table.Body>\n            {listings.map(l => (\n              <Table.Row>\n                {l.map(e => (\n                  <Table.Cell>{e}</Table.Cell>\n                ))}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Index, Listings } from \"./pages\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Header, Footer } from \"./components\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <Index />\n        </Route>\n        <Route path=\"/listings\">\n          <Listings />\n        </Route>\n      </Switch>\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}